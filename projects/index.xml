<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Lei Si</title><link>https://marsvegetables.github.io/projects/</link><description>Recent content in Projects on Lei Si</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 Nov 2021 11:37:43 -0500</lastBuildDate><atom:link href="https://marsvegetables.github.io/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>2D Quadrilateral Meshes Quality Improvement</title><link>https://marsvegetables.github.io/projects/quadmesh/</link><pubDate>Sat, 06 Nov 2021 11:37:43 -0500</pubDate><guid>https://marsvegetables.github.io/projects/quadmesh/</guid><description>Quadrilateral (or quad) meshes generated by various remeshing and simplification methods for input models with complex structure and boundary configurations often possess elements with minimal quality, which calls for an optimization approach to improve their individual elementsâ€™ quality while preserving the boundary features. Many existing methods either fix boundary vertices during optimization or assume a simple boundary configuration. In this paper, we introduce a new quality improvement framework for 2D quad meshes with open boundaries.</description></item><item><title>Hexa/Quad Mesh Quality Study</title><link>https://marsvegetables.github.io/projects/hqview/</link><pubDate>Sat, 06 Nov 2021 11:37:43 -0500</pubDate><guid>https://marsvegetables.github.io/projects/hqview/</guid><description>we present a new quality visual analysis system for 3D hexahedral (hex) and 2D quadrilateral (quad) meshes. Our system allows users to focus their attention on areas with poor quality elements without being distracted by the large elements in the mesh model through an aggregated quality glyph. Our system also explicitly highlights places with overlapping elements that are typically hard to see with existing visualization tools. In addition, we display boundary error information in three different forms to support its detailed inspection, which is often ignored by existing visualization tools.</description></item><item><title>ThreeJS Practice</title><link>https://marsvegetables.github.io/projects/threejs/</link><pubDate>Sat, 06 Nov 2021 11:37:43 -0500</pubDate><guid>https://marsvegetables.github.io/projects/threejs/</guid><description>Three.js is a JavaScript 3D library, and builds only include a WebGL renderer but WebGPU (experimental).
Practice example 1</description></item></channel></rss>